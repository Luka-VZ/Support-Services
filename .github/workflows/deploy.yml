name: Blue-Green Deployment

on:
    push:  # This will trigger the workflow on push events
      branches:
        - main  # Specify the branch to listen for pushes. Change as needed.
    pull_request:
      types: [opened, synchronize, reopened]
    schedule:
      - cron: '0 0 * * *' # This runs every day at 00:00 UTC
    workflow_dispatch: # Manual trigger

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # Use a GitHub-hosted runner for building and pushing the Docker image
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
     
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
    - name: Build Application
      run: |
        docker build -t i533542/test01 ./  # Build the Docker image
        echo "Building the application..."

    - name: Push to Docker Hub
      run: |
        docker push i533542/test01  # Push the image to Docker Hub
        echo "Pushing the image to Docker Hub..."

  deploy_dev:
      runs-on: self-hosted  # Use your self-hosted runner to deploy on the remote Docker server
      needs: build-and-push  # Ensure the deploy job only runs after build-and-push completes successfully
  
      steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
  
      - name: Deploy to dev Server
        run: |
          echo "Connecting to remote server..."
          ssh -o StrictHostKeyChecking=no student@172.16.2.43 << 'EOF'
              echo "Navigating to docker-compose directory..."
              cd apache-docker
  
              echo "Pulling the new image..."
              echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker pull i533542/test01  # Pull the image on the remote Docker server

              echo "Stopping current containers..."
              echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker-compose down  # Stop the current running containers

              echo "Starting new containers..."
              echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker-compose up -d  # Start the new containers
          EOF

  deploy_test:
      runs-on: self-hosted  # Use your self-hosted runner to deploy on the remote Docker server
      needs: build-and-push  # Ensure the deploy job only runs after build-and-push completes successfully
      
      steps:
      - name: Await Approval for Production
        id: approval
        run: |
            echo "Waiting for approval..."
            # Simulate waiting for approval
            # You could implement a check here based on your approval process


      - name: Setup SSH
        if: steps.approval.outputs.approved == 'true' # Check if approved
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_BLUE }}
  
      - name: Deploy to dev Server
        run: |
          echo "Connecting to remote server..."
          ssh -o StrictHostKeyChecking=no student@172.16.2.43 << 'EOF'
              echo "Navigating to docker-compose directory..."
              cd apache-docker
  
              echo "Pulling the new image..."
              echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker pull i533542/test01  # Pull the image on the remote Docker server

              echo "Stopping current containers..."
              echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker-compose down  # Stop the current running containers

              echo "Starting new containers..."
              echo"${{ secrets.SUDO_PASSWORD }}" | sudo -S docker-compose up -d  # Start the new containers
          EOF


 




